diff --git a/build.gradle b/build.gradle
index f7de50f..a2b24f4 100644
--- a/build.gradle
+++ b/build.gradle
@@ -17,4 +17,5 @@ dependencies {
     compileOnly group: 'org.projectlombok', name: 'lombok', version: "1.16.8"
 
     testCompile 'junit:junit:4.12'
+    testCompile 'org.hamcrest:hamcrest-library:1.3'
 }
\ No newline at end of file
diff --git a/src/test/java/com/devfactory/testserver/testproject/InMemoryRepositoryTest.java b/src/test/java/com/devfactory/testserver/testproject/InMemoryRepositoryTest.java
index 99cfeef..5b972c6 100644
--- a/src/test/java/com/devfactory/testserver/testproject/InMemoryRepositoryTest.java
+++ b/src/test/java/com/devfactory/testserver/testproject/InMemoryRepositoryTest.java
@@ -3,11 +3,53 @@ package com.devfactory.testserver.testproject;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.Matchers;
 import org.junit.Test;
 
+import java.util.Collection;
+
 public class InMemoryRepositoryTest {
     @Test
-    public void testGetInstance() throws Exception {
+    public void testGetInstance() {
         assertThat(InMemoryRepository.getInstance(), CoreMatchers.sameInstance(InMemoryRepository.getInstance()));
     }
+
+    @Test
+    public void testSavePresetId() {
+        Parent parent = new Parent();
+        parent.setName("parent");
+        parent.setId(100);
+        InMemoryRepository.getInstance().save(parent);
+
+        assertThat(InMemoryRepository.getInstance().find(Parent.class, 100), CoreMatchers.equalTo(parent));
+    }
+
+    @Test
+    public void testSaveAutoIncrementId() {
+        Parent parent = new Parent();
+        parent.setName("parent");
+        InMemoryRepository.getInstance().save(parent);
+
+        Collection<Parent> found = InMemoryRepository.getInstance().findAll(Parent.class);
+        assertThat(found, Matchers.hasSize(1));
+        assertThat(found.iterator().next().getId(), Matchers.is(1));
+    }
+
+    @Test
+    public void testChildSave() {
+        Parent parent = new Parent();
+        parent.setName("parent");
+
+        Child child = new Child();
+        child.setParent(parent);
+        child.setName("child");
+
+        parent.getChildren().add(child);
+
+        InMemoryRepository.getInstance().save(parent);
+
+        Collection<Child> children = InMemoryRepository.getInstance().findAll(Child.class);
+        assertThat(children, Matchers.hasSize(1));
+        assertThat(children.iterator().next(), Matchers.is(child));
+    }
 }
